// Jialin Li - CSCE 606 Spring 2022

// Each instance of Conversation holds the list of messages between two users
// the IDs of 2 users, which must be ordered lexicographically
// as well as a "unique ID", which uniquely identify a conversation between two users
// UniqueID is generated by concatenating two user's IDs, reserved for future use
// There should be at most one instance between any 2 users

// Messages: a model defined in models/message.dart
// from, to, content

import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:woolala_app/main.dart';

class Conversation {
  final String User1; // User1 must lexicographically precede User2
  final String User2; // Will enforce this in codes defined in app.js
  final String UniqueID; // User1:::User2
  final List Messages;

  Conversation({
    this.User1,
    this.User2,
    this.UniqueID,
    this.Messages,
  });

  Conversation.fromJSON(Map<String, dynamic> json)
    : User1 = json["User1"],
      User2 = json["User2"],
      UniqueID = json["UniqueID"],
      Messages = json["Messages"];

  Map<String, dynamic> toJSON() => {
    "User1" : User1,
    "User2" : User2,
    "UniqueID" : UniqueID,
    "Messages" : Messages,
  };
}

// called to get conversation between 2 users
Future<Conversation> getConversationBetween(String user1, String user2) async {
  http.Response res =
      await http.get(Uri.parse(domain + "/doesConversationExist/" + user1 + "/" + user2));
  if (res.body.isNotEmpty) { // already exists
    Map conversationMap = jsonDecode(res.body.toString());
    return Conversation.fromJSON(conversationMap);
  } else { // doesn't exist, return null
    return null;
  }
}

// create conversation between 2 users if not already exist
Future<http.Response> createConversationBetween(String user1, String user2) {
  var sorted = sort2Strings(user1, user2); // sort2Strings defined in main.dart
  return http.post(
    Uri.parse(domain + '/insertConversation'),
    headers: <String, String>{
      'Content-Type': 'application/json',
    },
    body: jsonEncode({
      "User1" : sorted[0],
      "User2" : sorted[1],
      "UniqueID" : sorted[2],
      "Messages" : [],
    }),
  );
}

String? conversationGetTheOther(String convID, String user1) {
  var names = convID.split(":::");
  if (user1 == names[0]) {
    return names[1];
  } else if (user1 == names[1]) {
    return names[0];
  } else {
    return null;
  }
}